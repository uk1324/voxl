impl List {
	log() {
		i : 0;
		while i < $.size() {
			print($[i]);
			print(" ");
			i += 1;
		}	
		print("\n");
	}

	contains(item) {
		i : 0;
		while i < $.size() {
			if $[i] == item {
				ret true;
			}
			i += 1;
		}	
		ret false;
	}
}

fn quicksort(list, left, right) {
	if left >= right {
		ret;
	}

	pivot : left;
	i : pivot + 1;
	while i < right {
		if list[i] < list[pivot] {
			temp : list[pivot];
			list[pivot] = list[i];
			list[i] = list[pivot + 1];
			list[pivot + 1] = temp;
			pivot += 1;
		} else {
			i += 1;
		}
	}

	quicksort(list, left, pivot);
	quicksort(list, pivot + 1, right);
}

fn bubblesort(list) {
	right : list.size();
	swapped : true;
	// TODO: Implement do while
	while swapped {
		right -= 1;
		swapped = false;
		i : 0;
		while i < right {
			if list[i] > list[i + 1] {
				swapped = true;
				temp : list[i];
				list[i] = list[i + 1];
				list[i + 1] = temp;
			}
			i += 1;
		}
	}
}

fn selectionsort(list) {
	fn find_min_index(list, left) {
		min : 123456789; // assume this is inf
		min_index : 0;
		i : left;
		while i < list.size() {
			if list[i] < min {
				min = list[i];
				min_index = i;
			}
			i += 1;
		}
		ret min_index;
	}

	left : 0;
	while left != list.size() {
		min_index : find_min_index(list, left);
		temp : list[left];
		list[left] = list[min_index];
		list[min_index] = temp;
		left += 1;
	}
}

fn insertionsort(list) {
	sorted_list_right : 1;
	while sorted_list_right < list.size() {
		item : list[sorted_list_right];
		i : sorted_list_right - 1;
		while i >= 0 && item < list[i] {
			list[i + 1] = list[i];
			i -= 1;
		}
		list[i + 1] = item;
		sorted_list_right += 1;
	}   
}

fn random_number_generator(modulus, increment, multiplier) {
	x : 0;
	fn next() {
		x = ((x * multiplier) + increment) % modulus;
		ret x;
	}
	ret next;
}

get_random: random_number_generator(134456, 28411, 8121);

fn generate_list(size) {
	list : List(); 
	while list.size() != size {
		loop {
			number : get_random() % size;
			if !list.contains(number) {
				list.push(number);
				break;
			}
		}
	}
	ret list;
}

x : generate_list(10);
quicksort(x, 0, x.size());
x.log();

x = generate_list(10);
bubblesort(x);
x.log();

x = generate_list(10);
selectionsort(x);
x.log();

x = generate_list(10);
insertionsort(x);
x.log();