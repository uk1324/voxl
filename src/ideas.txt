Iteration of strings requires a new string allocation for each character. To mitigate the problem commonly used characters (ASCII) could be always preallocated. A better solution would be to make a UTF-32 character type be stored insie value so no allocation is needed. A similar issue happens for bigger strings, created for example when splitting a string on a character. To solve this a a new type could be created, which would hold a reference to a ObjString and store a reference to a range of characters inside the strings that the object represents. Not sure if these objects should be transparent to the user or made explicit. One issue with making them transparent is that the FFI wouldn't have the guarantee that strings are always null terminated.

It would be possible to make LocalValue incur zero runtime cost and be safe if used inside an FFI function. This would require a defer statement that gets executed at the end of scope. Each FFI function has a context object with the allocator so it would look something like this.
#define LOCAL(name, value) \
	LocalValue name(value);
	c.allocator.registerLocal(&name);
	defer c.allocator.unregisterLocal(&name);
It is possible to implement this in C++ using a zero size template type taking a lambda as an argument and calling it in the destructor. Using this would require the context name to always be the same in all FFI functions. Creating temporaries would also not be possible and the compile time cost will be significant.

https://github.com/ko1/pretty_backtrace

Should enums be boxed or compile time constants?

To make default and other things simpler compile time constants could be added
<variable name> :: <value>;

Runtime constants wouldn't make much sense becuase functions would need to specify if arguments are const or not which doesn't really fit a dynamically typed language.

Extending functions.
impl Int {
	extend fn $add(b) {
		match b {
			Complex => ret {}
			Int => ret $old($, b);
		}
	}
}
This would require creating a new Obj that would store the pointer to the old function. $old is an implicit argument.

Statement expression are just normal statments prefixed by some token. To return from a inside statment use a special operator. By default returns null. The implementation would probably just don't pop the values that are returned. Maybe don't allow if statments without an else.
x : @{
	@ret 5;
};

x = @if rand() > 0.5 {
	@ret 1;
} else {
	@ret 0;
};
More about this in Compiler::stmtExpr().
	
uninitialized variables
With the current syntax
<variable> : <value>
it isn't possible to create explicitly uninitialized variables. If there is a special constructo for this purpose the compiler could check if there is a situation in which the value is accesssed without being initialized.
<variable> : --;

Match could just be a expression.
if match <ptrn> {

} else if match <ptrn> {

}
or maybe use some shorter syntax.

Better testing if new features work with other features. For example you can't jump out of a finally block. The only way to check this would be to decode the bytecode and check if inside the code generated for the block are any jumps outsdie of it. This could be done during compliation. Then the boundries of the code would be known. Another way could be to add an array of labels with offsets into the code that would be used to check the boundries. Making code that just has the code for this feature would work in some cases but not with finally statements. The test cases could just be made by generating random code. 

Traits
trait Iterator {
	// Required interface
	$next();
	// New functionality
	take(n) {
		...
	}
}

impl Iterator for MyClass {
	$next() {
		...
	}
}

It might be better to allow for multiple functions with the same name that different traits use. Don't know about storage yet.

One issue with traits in a dynamically typed language is that method collision can happen. An error should only happen if the method with multiple versions is accessed by using the dot access syntax. The information about collisions could be cached and updated on every new "impl for". To access a method unambigously get the function directly from the class and call it with the instance as the first argument. Collisions for the trait interface method shouldn't happend inside the traits methods, because the correct function can be found based on the trait that the method being called belongs to. Closures inside the functions should probably also get be treated as trait functions.

With traits chaining iterators like map and filter is simpler although it could also be implemented by creating a class that takes an iterator and applies these methods onto the iterator it stores and also provides an iterface that allows iterating it.

When using a reference counting garbage collector GCed objects can't be in a invalid state. All allocation could be considered roots and every once in a while a tracing GC would run through them. Native objects shouldn't store GCed objects directly inside them because then cyclic referencs can't be found (could also have a mark method but this would only be used for base types like List). The GCed objects could be stored inside a hash table just like in non native objects. This would make the FFI a lot easier to use.

Default function arguments

Should default arguments be evaluated at runtime based on the argument count like in javascript. This could be implemented with a switch with fallthoughs or something like this. Argcount could be obtained using a instruction.

// Push nulls is probably not needed if statement expressions are not in the language.
pushNulls(expectedArgCount - argCount);
switch (argCount) 
{
	case 0:
		setLocal(0, <expr0>);
	case 1:
		setLocal(1, <expr1>);
}

Python creates on one instance of the argument per function. This leads to unexpected results.
def x(x = []):
	x.append(1)
	print(x)
x()
x()

output:
[1]
[1, 1]

Another option would be to only allow compile time expressions. Then the default values would be stored inside the class and push on the stack like in the frist example.

